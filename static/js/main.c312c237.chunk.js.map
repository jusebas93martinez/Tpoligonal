{"version":3,"sources":["components/GraficoPoligonalSVG.js","components/FormularioObservacion.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["GraficoPoligonal","_ref","observacionesCompensadas","colorLinea","setColorLinea","useState","grosorLinea","setGrosorLinea","colorPunto","setColorPunto","tamañoFlecha","setTamañoFlecha","colorFlecha","setColorFlecha","mostrarFlecha","setMostrarFlecha","mostrarMenu","setMostrarMenu","minX","Math","min","map","p","parseFloat","nuevoEsteAjustado","maxX","max","minY","nuevoNorteAjustado","maxY","rangoX","rangoY","escala","offsetX","offsetY","escalarX","valor","escalarY","React","createElement","style","position","border","width","height","padding","onClick","top","right","zIndex","left","backgroundColor","borderRadius","boxShadow","fontSize","display","marginBottom","type","value","onChange","e","target","marginTop","Number","checked","UncontrolledReactSVGPanZoom","background","tool","detectAutoPan","toolbarProps","miniatureProps","transform","color","cursor","id","markerWidth","markerHeight","refX","refY","orient","markerUnits","d","fill","Array","from","length","ceil","anchoSVG","_","i","key","x1","y1","x2","y2","stroke","strokeWidth","altoSVG","index","cx","cy","r","data-tooltip-id","data-tooltip-content","x","y","markerEnd","FormularioObservacion","agregarObservacion","norteInicial","setNorteInicial","esteInicial","setEsteInicial","norteVisado","setNorteVisado","esteVisado","setEsteVisado","azimutInicial","setAzimutInicial","distanciaInicial","setDistanciaInicial","coordenadasCalculadas","setCoordenadasCalculadas","gradosH","setGradosH","minutosH","setMinutosH","segundosH","setSegundosH","gradosV","setGradosV","minutosV","setMinutosV","segundosV","setSegundosV","distanciaObservada","setDistanciaObservada","alturaInicial","setAlturaInicial","nuevoAzimut","setNuevoAzimut","sumaTeorica","setSumaTeorica","sumaReal","setSumaReal","errorAngular","setErrorAngular","sentidoPoligonal","setSentidoPoligonal","setObservacionesCompensadas","brazoExterno","setBrazoExterno","cierreAlturas","setCierreAlturas","descripcionInicial","setDescripcionInicial","descripcionVisado","setDescripcionVisado","coordenadas","setCoordenadas","calcularCierreAlturas","observacionesActualizadas","sumatoriaDistanciasVerticales","slice","reduce","acumulado","obs","distanciaVertical","alturaInstrumental","alturaPrisma","console","log","toFixed","calcularCierreAngular","observaciones","N","grados","minutos","segundos","contadorObservaciones","sumatoriaInicializada","forEach","angulo","sumarAngulos","restarAngulos","a1","a2","floor","convertirAGradosDecimales","mayor","menor","convertirGMSToDecimal","convertirDecimalAGMS","gradosDecimales","minutosDecimales","round","setObservaciones","setAlturaInstrumental","setAlturaPrisma","precisionPoligonal","setPrecisionPoligonal","idObservacion","setIdObservacion","calcularDistanciaVerticalZenital","anguloDecimal","anguloRad","convertirGradosARadianes","cos","calcularAlturaObservacion","PI","calcularCoordenadas","norteAnterior","esteAnterior","proyeccionNorte","proyeccionEste","nuevoNorte","nuevoEste","setContadorObservaciones","totalDistancia","setTotalDistancia","totalProyeccionNorte","setTotalProyeccionNorte","totalProyeccionEste","setTotalProyeccionEste","ultimoAzimut","setUltimoAzimut","calcularPrecision","distanciaTotal","proyeccionNorteTotal","proyeccionEsteTotal","sqrt","pow","calcularContraAzimut","azimut","contraAzimut","calcularAzimutSegundaObservacion","anguloObservadoDecimal","compensarProyeccionesYAlturas","nuevasObservaciones","errorNorte","errorEste","errorAlturas","total","distancia","ajustarAlturasVerticales","alturaAcumulada","alturaCalculada","isNaN","error","alturaCompensada","distanciaVerticalCompensada","ajusteAltura","abs","alturaCalculada1","proyeccionNorteCompensada","proyeccionEsteCompensada","ajusteNorte","ajusteEste","onSubmit","preventDefault","className","Fragment","coord","norte","este","altura","margin","placeholder","agregarNuevaObservacion","undefined","alert","nuevoAzimutCalculado","calcularAzimutObservacion","anguloHorizontalDecimal","calcularNuevoAzimut","azimutSexagesimal","calcularProyecciones","azimutRad","sin","nuevaObservacion","anguloHorizontal","anguloVertical","prevObservaciones","observacionesFiltradas","nuevasDistancias","acc","nuevasProyeccionesNorte","nuevasProyeccionesEste","nuevaPrecision","recalcularTotales","prevTotal","cellPadding","cellSpacing","borrarUltimaObservacion","ultimaObservacion","ultimoAzimutAnterior","ultimoAzimutDecimal","split","num","compensarPoligonal","compensarAngular","cantidadObservaciones","ajusteAngular","anguloHorizontalCompensado","anguloDec","anguloCompensadoGMS","observacionesFinales","recalcularCoordenadasAjustadas","proyeccionNorteAjustada","proyeccionEsteAjustada","bottom","test","required","calcularAzimutYAlmacenarValores","calcularAzimutYDistanciaDesdeCoordenadas","deltaX","deltaY","azimutDeg","atan2","Login","setIsAuthenticated","username","setUsername","password","setPassword","setError","navigate","useNavigate","justifyContent","alignItems","App","isAuthenticated","Router","Routes","Route","path","element","observacion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c312c237.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { UncontrolledReactSVGPanZoom } from \"react-svg-pan-zoom\"; // Pan y zoom para el SVG\r\n\r\nconst GraficoPoligonal = ({ observacionesCompensadas = [] }) => {\r\n  const [colorLinea, setColorLinea] = useState(\"blue\");\r\n  const [grosorLinea, setGrosorLinea] = useState(2);\r\n  const [colorPunto, setColorPunto] = useState(\"red\");\r\n  const [tamañoFlecha, setTamañoFlecha] = useState(10);\r\n  const [colorFlecha, setColorFlecha] = useState(\"blue\");\r\n  const [mostrarFlecha, setMostrarFlecha] = useState(true);\r\n  const [mostrarMenu, setMostrarMenu] = useState(false); // Estado para controlar la visibilidad del menú\r\n\r\n  const anchoSVG = 320;\r\n  const altoSVG = 550;\r\n  const gridSpacing = 100; // Espaciado de la cuadrícula\r\n\r\n  // Calcula los valores mínimos y máximos de las coordenadas ajustadas\r\n  const minX = Math.min(\r\n    ...observacionesCompensadas.map((p) => parseFloat(p.nuevoEsteAjustado))\r\n  );\r\n  const maxX = Math.max(\r\n    ...observacionesCompensadas.map((p) => parseFloat(p.nuevoEsteAjustado))\r\n  );\r\n  const minY = Math.min(\r\n    ...observacionesCompensadas.map((p) => parseFloat(p.nuevoNorteAjustado))\r\n  );\r\n  const maxY = Math.max(\r\n    ...observacionesCompensadas.map((p) => parseFloat(p.nuevoNorteAjustado))\r\n  );\r\n\r\n  // Agrega un margen del 10% alrededor de los extremos\r\n  const margen = 0.25; // 10% de margen\r\n\r\n  const rangoX = (maxX - minX) * (1 + margen);\r\n  const rangoY = (maxY - minY) * (1 + margen);\r\n\r\n  // Calcula la escala para ajustar la poligonal al tamaño del SVG\r\n  const escala = Math.min(anchoSVG / rangoX, altoSVG / rangoY);\r\n\r\n  // Centra la poligonal en el SVG\r\n  const offsetX = (anchoSVG - (maxX - minX) * escala) / 2;\r\n  const offsetY = (altoSVG - (maxY - minY) * escala) / 2;\r\n\r\n  // Función para escalar las coordenadas al tamaño del SVG\r\n  const escalarX = (valor) => (valor - minX) * escala + offsetX;\r\n  const escalarY = (valor) => altoSVG - (valor - minY) * escala - offsetY; // Invertir el eje Y para el SVG\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        border: \"2px solid black\",\r\n        width: `${anchoSVG}px`,\r\n        height: `${altoSVG}px`,\r\n        padding: \"10px\",\r\n      }}\r\n    >\r\n      {/* Botón para mostrar/ocultar el menú */}\r\n      <button\r\n        onClick={() => setMostrarMenu(!mostrarMenu)} // Alternar visibilidad del menú\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"5px\",\r\n          right: \"5px\",\r\n          zIndex: 11, // Asegura que esté encima del SVG\r\n        }}\r\n      >\r\n        {mostrarMenu ? \"Ocultar Configuración\" : \"Mostrar Configuración\"}\r\n      </button>\r\n\r\n      {/* Menú de configuración flotante */}\r\n      {mostrarMenu && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"40px\",\r\n            left: \"5px\",\r\n            backgroundColor: \"white\",\r\n            padding: \"10px\",\r\n            borderRadius: \"8px\",\r\n            boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.1)\",\r\n            zIndex: 10,\r\n            fontSize: \"10px\",\r\n          }}\r\n        >\r\n          <label style={{ display: \"block\", marginBottom: \"5px\" }}>\r\n            Color de la línea:\r\n            <input\r\n              type=\"color\"\r\n              value={colorLinea}\r\n              onChange={(e) => setColorLinea(e.target.value)}\r\n              style={{ width: \"40%\", marginTop: \"3px\" }}\r\n            />\r\n          </label>\r\n          <label style={{ display: \"block\", marginBottom: \"5px\" }}>\r\n            Grosor de la línea:\r\n            <input\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max=\"50\"\r\n              value={grosorLinea}\r\n              onChange={(e) => setGrosorLinea(Number(e.target.value))}\r\n              style={{ width: \"30%\", marginTop: \"3px\" }}\r\n            />\r\n          </label>\r\n          <label style={{ display: \"block\", marginBottom: \"5px\" }}>\r\n            Color del punto:\r\n            <input\r\n              type=\"color\"\r\n              value={colorPunto}\r\n              onChange={(e) => setColorPunto(e.target.value)}\r\n              style={{ width: \"40%\", marginTop: \"3px\" }}\r\n            />\r\n          </label>\r\n          <label style={{ display: \"block\", marginBottom: \"5px\" }}>\r\n            Tamaño de la flecha:\r\n            <input\r\n              type=\"number\"\r\n              min=\"5\"\r\n              max=\"40\"\r\n              value={tamañoFlecha}\r\n              onChange={(e) => setTamañoFlecha(Number(e.target.value))}\r\n              style={{ width: \"30%\", marginTop: \"2px\" }}\r\n            />\r\n          </label>\r\n          <label style={{ display: \"block\", marginBottom: \"5px\" }}>\r\n            Color de la flecha:\r\n            <input\r\n              type=\"color\"\r\n              value={colorFlecha}\r\n              onChange={(e) => setColorFlecha(e.target.value)}\r\n              style={{ width: \"40%\", marginTop: \"3px\" }}\r\n            />\r\n          </label>\r\n          <label style={{ display: \"block\", marginBottom: \"5px\" }}>\r\n            Mostrar flecha:\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={mostrarFlecha}\r\n              onChange={(e) => setMostrarFlecha(e.target.checked)}\r\n              style={{ marginTop: \"3px\" }}\r\n            />\r\n          </label>\r\n        </div>\r\n      )}\r\n\r\n      {/* Renderización del SVG con pan y zoom */}\r\n      <UncontrolledReactSVGPanZoom\r\n        width={anchoSVG}\r\n        height={altoSVG}\r\n        background=\"transparent\"\r\n        tool=\"auto\"\r\n        detectAutoPan={false}\r\n        toolbarProps={{ position: \"none\" }}\r\n        miniatureProps={{ position: \"none\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            width: `${anchoSVG}px`,\r\n            height: `${altoSVG}px`,\r\n          }}\r\n        >\r\n          {/* Botón para mostrar/ocultar configuración */}\r\n          <button\r\n            onClick={() => setMostrarMenu(!mostrarMenu)}\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"-35px\", // Ajusta la posición del botón hacia arriba\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\", // Centra horizontalmente el botón\r\n              backgroundColor: \"#007bff\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              padding: \"10px 20px\",\r\n              borderRadius: \"8px\",\r\n              cursor: \"pointer\",\r\n              zIndex: 10, // Asegura que esté por encima del gráfico\r\n            }}\r\n          >\r\n            {mostrarMenu ? \"Ocultar Configuración\" : \"Mostrar Configuración\"}\r\n          </button>\r\n\r\n          {/* SVG que contiene el gráfico */}\r\n          <svg\r\n            width={anchoSVG}\r\n            height={altoSVG}\r\n            style={{ border: \"0.6px solid black\", zIndex: 1 }}\r\n          >\r\n            {/* Aquí va la cuadrícula, los puntos y las líneas */}\r\n            <defs>\r\n              <marker\r\n                id=\"arrow\"\r\n                markerWidth={tamañoFlecha}\r\n                markerHeight={tamañoFlecha}\r\n                refX=\"10\"\r\n                refY=\"3\"\r\n                orient=\"auto\"\r\n                markerUnits=\"strokeWidth\"\r\n              >\r\n                <path d=\"M0,0 L0,6 L9,3 z\" fill={colorFlecha} />\r\n              </marker>\r\n            </defs>\r\n\r\n            {/* Renderización de la cuadrícula */}\r\n            {Array.from({ length: Math.ceil(anchoSVG / gridSpacing) }).map(\r\n              (_, i) => (\r\n                <line\r\n                  key={`v-grid-${i}`}\r\n                  x1={i * gridSpacing}\r\n                  y1={0}\r\n                  x2={i * gridSpacing}\r\n                  y2={altoSVG}\r\n                  stroke=\"#d3d3d3\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n              )\r\n            )}\r\n            {Array.from({ length: Math.ceil(altoSVG / gridSpacing) }).map(\r\n              (_, i) => (\r\n                <line\r\n                  key={`h-grid-${i}`}\r\n                  x1={0}\r\n                  y1={i * gridSpacing}\r\n                  x2={anchoSVG}\r\n                  y2={i * gridSpacing}\r\n                  stroke=\"#d3d3d3\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n              )\r\n            )}\r\n\r\n            {/* Renderización de los puntos y las líneas */}\r\n            {observacionesCompensadas.map((p, index) => {\r\n              const cx = escalarX(parseFloat(p.nuevoEsteAjustado));\r\n              const cy = escalarY(parseFloat(p.nuevoNorteAjustado));\r\n              return (\r\n                <g key={index}>\r\n                  <circle\r\n                    cx={cx}\r\n                    cy={cy}\r\n                    r=\"6\"\r\n                    fill={colorPunto}\r\n                    data-tooltip-id={`tooltip-${index}`}\r\n                    data-tooltip-content={`ID: ${p.id}, Norte: ${p.nuevoNorteAjustado}, Este: ${p.nuevoEsteAjustado}`}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                  <text x={cx + 5} y={cy - 5} fontSize=\"12\" fill=\"black\">\r\n                    {p.id}\r\n                  </text>\r\n                </g>\r\n              );\r\n            })}\r\n\r\n            {observacionesCompensadas.map((p, index) => {\r\n              if (index < observacionesCompensadas.length - 1) {\r\n                const x1 = escalarX(parseFloat(p.nuevoEsteAjustado));\r\n                const y1 = escalarY(parseFloat(p.nuevoNorteAjustado));\r\n                const x2 = escalarX(\r\n                  parseFloat(\r\n                    observacionesCompensadas[index + 1].nuevoEsteAjustado\r\n                  )\r\n                );\r\n                const y2 = escalarY(\r\n                  parseFloat(\r\n                    observacionesCompensadas[index + 1].nuevoNorteAjustado\r\n                  )\r\n                );\r\n                return (\r\n                  <line\r\n                    key={index}\r\n                    x1={x1}\r\n                    y1={y1}\r\n                    x2={x2}\r\n                    y2={y2}\r\n                    stroke={colorLinea}\r\n                    strokeWidth={grosorLinea}\r\n                    markerEnd={mostrarFlecha ? \"url(#arrow)\" : null}\r\n                  />\r\n                );\r\n              }\r\n              return null;\r\n            })}\r\n\r\n            {observacionesCompensadas.length > 2 && (\r\n              <line\r\n                x1={escalarX(\r\n                  parseFloat(\r\n                    observacionesCompensadas[\r\n                      observacionesCompensadas.length - 1\r\n                    ].nuevoEsteAjustado\r\n                  )\r\n                )}\r\n                y1={escalarY(\r\n                  parseFloat(\r\n                    observacionesCompensadas[\r\n                      observacionesCompensadas.length - 1\r\n                    ].nuevoNorteAjustado\r\n                  )\r\n                )}\r\n                x2={escalarX(\r\n                  parseFloat(observacionesCompensadas[0].nuevoEsteAjustado)\r\n                )}\r\n                y2={escalarY(\r\n                  parseFloat(observacionesCompensadas[0].nuevoNorteAjustado)\r\n                )}\r\n                stroke={colorLinea}\r\n                strokeWidth={grosorLinea}\r\n                markerEnd={mostrarFlecha ? \"url(#arrow)\" : null}\r\n              />\r\n            )}\r\n          </svg>\r\n        </div>\r\n      </UncontrolledReactSVGPanZoom>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraficoPoligonal;\r\n","import React, { useState } from \"react\";\r\nimport GraficoPoligonal from \"./GraficoPoligonalSVG\";\r\n\r\nconst FormularioObservacion = ({ agregarObservacion }) => {\r\n  // Estados para coordenadas y observaciones\r\n  const [norteInicial, setNorteInicial] = useState(\"\");\r\n  const [esteInicial, setEsteInicial] = useState(\"\");\r\n  const [norteVisado, setNorteVisado] = useState(\"\");\r\n  const [esteVisado, setEsteVisado] = useState(\"\");\r\n\r\n  const [azimutInicial, setAzimutInicial] = useState(null); // Estado para el azimut inicial\r\n  const [distanciaInicial, setDistanciaInicial] = useState(null); // Estado para la distancia inicial\r\n  const [coordenadasCalculadas, setCoordenadasCalculadas] = useState(false); // Para controlar si ya calculaste las coordenadas\r\n\r\n  // Estados para los ángulos y la distancia observada\r\n  const [gradosH, setGradosH] = useState(\"\");\r\n  const [minutosH, setMinutosH] = useState(\"\");\r\n  const [segundosH, setSegundosH] = useState(\"\");\r\n\r\n  const [gradosV, setGradosV] = useState(\"\");\r\n  const [minutosV, setMinutosV] = useState(\"\");\r\n  const [segundosV, setSegundosV] = useState(\"\");\r\n\r\n  const [distanciaObservada, setDistanciaObservada] = useState(\"\");\r\n  const [alturaInicial, setAlturaInicial] = useState(\"\"); // Nueva variable para la altura inicial\r\n\r\n  const [nuevoAzimut, setNuevoAzimut] = useState(null); // Estado para el nuevo azimut calculado\r\n\r\n  const [sumaTeorica, setSumaTeorica] = useState(0);\r\n  const [sumaReal, setSumaReal] = useState(0);\r\n  const [errorAngular, setErrorAngular] = useState(0);\r\n\r\n  const [sentidoPoligonal, setSentidoPoligonal] = useState(\"internos\"); // 'internos' o 'externos'\r\n  const [observacionesCompensadas, setObservacionesCompensadas] = useState([]); // Para las observaciones ajustadas\r\n  // Suponiendo que tienes estos estados definidos en algún lugar del componente\r\n  const [brazoExterno, setBrazoExterno] = useState(false); // Por defecto, el brazo es interno\r\n  const [cierreAlturas, setCierreAlturas] = useState(0); // Estado para almacenar el cierre de alturas\r\n  const [descripcionInicial, setDescripcionInicial] = useState(\"\");\r\n  const [descripcionVisado, setDescripcionVisado] = useState(\"\");\r\n  const [coordenadas, setCoordenadas] = useState([]);\r\n\r\n  const calcularCierreAlturas = (observacionesActualizadas) => {\r\n    if (observacionesActualizadas.length === 0) {\r\n      setCierreAlturas(0); // Si no hay observaciones, el cierre de alturas es 0\r\n      return 0;\r\n    }\r\n\r\n    // Filtrar las observaciones según el tipo de brazo\r\n    const observacionesAConsiderar = brazoExterno\r\n      ? observacionesActualizadas.slice(1) // Si es brazo externo, omitimos la primera observación\r\n      : observacionesActualizadas; // Si es brazo interno, usamos todas las observaciones\r\n\r\n    // Calcular la sumatoria de las distancias verticales reales (valor absoluto)\r\n    const sumatoriaDistanciasVerticales = observacionesAConsiderar.reduce(\r\n      (acumulado, obs) =>\r\n        acumulado +\r\n        parseFloat(obs.distanciaVertical) + // Tomamos el valor absoluto de la distancia vertical\r\n        parseFloat(obs.alturaInstrumental) -\r\n        parseFloat(obs.alturaPrisma),\r\n      0\r\n    );\r\n\r\n    console.log(\r\n      `\\nSumatoria de Distancias Verticales Calculadas: ${sumatoriaDistanciasVerticales.toFixed(\r\n        4\r\n      )}`\r\n    );\r\n\r\n    // Guardar y retornar el cierre de alturas manteniendo el signo\r\n    const cierreAlturas = sumatoriaDistanciasVerticales.toFixed(4);\r\n    setCierreAlturas(cierreAlturas);\r\n\r\n    console.log(`Cierre de alturas calculado: ${cierreAlturas}`);\r\n\r\n    return parseFloat(cierreAlturas); // Retornamos el valor numérico con su signo\r\n  };\r\n\r\n  const calcularCierreAngular = (observaciones, sentidoPoligonal) => {\r\n    const N = observaciones.length;\r\n    if (N === 0) return;\r\n\r\n    // Inicializamos la sumatoria de los ángulos con 0° 0' 0\"\r\n    let sumaReal = { grados: 0, minutos: 0, segundos: 0 };\r\n\r\n    // Contador para rastrear el número de observaciones\r\n    let contadorObservaciones = 0;\r\n\r\n    // Bandera para saber si ya hemos inicializado la suma con la segunda observación\r\n    let sumatoriaInicializada = false;\r\n\r\n    // Iteramos sobre las observaciones\r\n    observaciones.forEach((obs) => {\r\n      contadorObservaciones++; // Incrementamos el contador por cada observación\r\n\r\n      // Si es la primera observación y el brazo es externo, la ignoramos\r\n      if (contadorObservaciones === 0 && brazoExterno) {\r\n        return; // Salta la primera observación\r\n      }\r\n\r\n      // Convertir los valores del ángulo de la observación actual\r\n      const angulo = {\r\n        grados: Number(obs.gradosH),\r\n        minutos: Number(obs.minutosH),\r\n        segundos: Number(obs.segundosH),\r\n      };\r\n\r\n      // Si es la segunda observación y la primera fue omitida, inicializamos la sumatoria\r\n      if (\r\n        contadorObservaciones === 0 &&\r\n        brazoExterno &&\r\n        !sumatoriaInicializada\r\n      ) {\r\n        sumaReal = angulo; // Iniciamos la sumatoria con el ángulo de la segunda observación\r\n        sumatoriaInicializada = true; // Marcamos que ya hemos inicializado la sumatoria\r\n      } else {\r\n        // Para todas las demás observaciones, sumamos los ángulos normalmente\r\n        sumaReal = sumarAngulos(sumaReal, angulo);\r\n      }\r\n    });\r\n\r\n    // Calculamos la suma teórica dependiendo del tipo de poligonal\r\n    let sumaTeorica;\r\n    if (sentidoPoligonal === \"internos\") {\r\n      sumaTeorica = { grados: (N - 2) * 180, minutos: 0, segundos: 0 };\r\n    } else {\r\n      sumaTeorica = { grados: (N + 2) * 180, minutos: 0, segundos: 0 };\r\n    }\r\n\r\n    // Calculamos el error angular\r\n    const errorAngular = restarAngulos(sumaTeorica, sumaReal);\r\n\r\n    // Actualizamos los estados con los valores finales\r\n    setSumaTeorica(sumaTeorica);\r\n    setSumaReal(sumaReal);\r\n    setErrorAngular(errorAngular);\r\n  };\r\n\r\n  const sumarAngulos = (a1, a2) => {\r\n    let segundos = Number(a1.segundos) + Number(a2.segundos);\r\n    let minutos = Number(a1.minutos) + Number(a2.minutos);\r\n    let grados = Number(a1.grados) + Number(a2.grados);\r\n\r\n    // Ajustar segundos si exceden 60\r\n    if (segundos >= 60) {\r\n      minutos += Math.floor(segundos / 60);\r\n      segundos = segundos % 60;\r\n    }\r\n\r\n    // Ajustar minutos si exceden 60\r\n    if (minutos >= 60) {\r\n      grados += Math.floor(minutos / 60);\r\n      minutos = minutos % 60;\r\n    }\r\n\r\n    return { grados, minutos, segundos };\r\n  };\r\n\r\n  const convertirAGradosDecimales = (grados, minutos, segundos) => {\r\n    return grados + minutos / 60 + segundos / 3600;\r\n  };\r\n\r\n  const restarAngulos = (a1, a2) => {\r\n    // Convertir los ángulos a grados decimales para compararlos\r\n    const angulo1Decimal = convertirAGradosDecimales(\r\n      a1.grados,\r\n      a1.minutos,\r\n      a1.segundos\r\n    );\r\n    const angulo2Decimal = convertirAGradosDecimales(\r\n      a2.grados,\r\n      a2.minutos,\r\n      a2.segundos\r\n    );\r\n\r\n    // Determinar cuál es el mayor y el menor\r\n    let mayor, menor;\r\n    if (angulo1Decimal >= angulo2Decimal) {\r\n      mayor = a1;\r\n      menor = a2;\r\n    } else {\r\n      mayor = a2;\r\n      menor = a1;\r\n    }\r\n\r\n    // Restar ángulos (siempre mayor - menor)\r\n    let segundos = mayor.segundos - menor.segundos;\r\n    let minutos = mayor.minutos - menor.minutos;\r\n    let grados = mayor.grados - menor.grados;\r\n\r\n    // Si los segundos son negativos, pedir prestado 1 minuto\r\n    if (segundos < 0) {\r\n      segundos += 60;\r\n      minutos -= 1;\r\n    }\r\n\r\n    // Si los minutos son negativos, pedir prestado 1 grado\r\n    if (minutos < 0) {\r\n      minutos += 60;\r\n      grados -= 1;\r\n    }\r\n\r\n    return { grados, minutos, segundos };\r\n  };\r\n\r\n  // Función para convertir GMS a grados decimales\r\n  const convertirGMSToDecimal = (grados, minutos, segundos) => {\r\n    return (\r\n      parseFloat(grados) +\r\n      parseFloat(minutos) / 60 +\r\n      parseFloat(segundos) / 3600\r\n    );\r\n  };\r\n  const convertirDecimalAGMS = (gradosDecimales) => {\r\n    const grados = Math.floor(gradosDecimales); // Parte entera para los grados\r\n    const minutosDecimales = (gradosDecimales - grados) * 60;\r\n    const minutos = Math.floor(minutosDecimales); // Parte entera para los minutos\r\n    const segundos = Math.round((minutosDecimales - minutos) * 60); // Redondear los segundos a enteros\r\n\r\n    return `${grados}° ${minutos}' ${segundos}\"`;\r\n  };\r\n\r\n  // Estado para almacenar todas las observaciones\r\n  const [observaciones, setObservaciones] = useState([]);\r\n\r\n  // Estados para las alturas\r\n  const [alturaInstrumental, setAlturaInstrumental] = useState(\"\");\r\n  const [alturaPrisma, setAlturaPrisma] = useState(\"\");\r\n\r\n  // Estado para almacenar la precisión de la poligonal\r\n  const [precisionPoligonal, setPrecisionPoligonal] = useState(0);\r\n\r\n  // Estado para el ID de la observación\r\n  const [idObservacion, setIdObservacion] = useState(\"\");\r\n\r\n  // Función para calcular el azimut inicial y la distancia a partir de coordenadas\r\n  const calcularAzimutYDistanciaDesdeCoordenadas = (\r\n    norteInicial,\r\n    esteInicial,\r\n    norteVisado,\r\n    esteVisado\r\n  ) => {\r\n    const deltaX = parseFloat(esteVisado) - parseFloat(esteInicial);\r\n    const deltaY = parseFloat(norteVisado) - parseFloat(norteInicial);\r\n\r\n    // Azimut inicial en grados\r\n    let azimutRad = Math.atan2(deltaX, deltaY);\r\n    let azimutDeg = azimutRad * (180 / Math.PI); // Convertimos de radianes a grados\r\n\r\n    // Ajustar el azimut para que esté en el rango de 0 a 360 grados\r\n    if (azimutDeg < 0) {\r\n      azimutDeg += 360;\r\n    } else if (azimutDeg >= 360) {\r\n      azimutDeg -= 360;\r\n    }\r\n\r\n    // Calcular la distancia entre D1 y D2\r\n    const distancia = Math.sqrt(deltaX ** 2 + deltaY ** 2);\r\n\r\n    // Retornar el azimut y la distancia\r\n    return {\r\n      azimut: azimutDeg.toFixed(4), // Redondear azimut a 4 decimales\r\n      distancia: distancia.toFixed(4), // Redondear distancia a 4 decimales\r\n    };\r\n  };\r\n\r\n  // Función que calcula y almacena azimut y distancia\r\n  const calcularAzimutYAlmacenarValores = () => {\r\n    const { azimut, distancia } = calcularAzimutYDistanciaDesdeCoordenadas(\r\n      norteInicial,\r\n      esteInicial,\r\n      norteVisado,\r\n      esteVisado\r\n    );\r\n\r\n    // Almacenar los valores calculados en el estado\r\n    setAzimutInicial(azimut);\r\n    setDistanciaInicial(distancia);\r\n\r\n    // Guardar las coordenadas con sus descripciones\r\n    const nuevasCoordenadas = [\r\n      {\r\n        id: descripcionInicial || \"Punto Inicial\",\r\n        norte: norteInicial,\r\n        este: esteInicial,\r\n        altura: alturaInicial,\r\n      },\r\n      {\r\n        id: descripcionVisado || \"Punto Visado\",\r\n        norte: norteVisado,\r\n        este: esteVisado,\r\n      },\r\n    ];\r\n    setCoordenadas(nuevasCoordenadas);\r\n\r\n    setCoordenadasCalculadas(true); // Marcar que ya se calcularon las coordenadas\r\n  };\r\n\r\n  // Función para calcular la distancia vertical zenital\r\n  const calcularDistanciaVerticalZenital = (\r\n    grados,\r\n    minutos,\r\n    segundos,\r\n    distanciaObservada\r\n  ) => {\r\n    // Convertimos los grados a decimales\r\n    const anguloDecimal = convertirGMSToDecimal(grados, minutos, segundos);\r\n\r\n    // Convertimos el ángulo a radianes\r\n    const anguloRad = convertirGradosARadianes(anguloDecimal);\r\n\r\n    // Calculamos la distancia vertical usando el coseno del ángulo\r\n    const distanciaVertical = distanciaObservada * Math.cos(anguloRad);\r\n\r\n    return distanciaVertical.toFixed(4); // Redondear a 4 decimales\r\n  };\r\n\r\n  const calcularAlturaObservacion = (\r\n    alturaInicial,\r\n    distanciaVertical,\r\n    alturaInstrumental,\r\n    alturaPrisma\r\n  ) => {\r\n    // Calcular la altura final sobre el piso\r\n    const alturaFinal =\r\n      parseFloat(alturaInicial) +\r\n      parseFloat(alturaInstrumental) -\r\n      parseFloat(alturaPrisma) +\r\n      parseFloat(distanciaVertical);\r\n    return alturaFinal.toFixed(4); // Redondear a 4 decimales\r\n  };\r\n\r\n  // Función para calcular el nuevo azimut basado en el azimut inicial y el ángulo observado\r\n  const calcularNuevoAzimut = (azimutInicial, anguloObservadoDecimal) => {\r\n    let nuevoAzimut = azimutInicial + anguloObservadoDecimal;\r\n\r\n    // Si el azimut es mayor o igual a 360, restamos 360 para ajustarlo\r\n    if (nuevoAzimut >= 360) {\r\n      nuevoAzimut -= 360;\r\n    }\r\n\r\n    return nuevoAzimut.toFixed(4); // Retornamos el nuevo azimut en grados decimales\r\n  };\r\n\r\n  // Función para calcular y almacenar el nuevo azimut basado en la observación\r\n  const calcularAzimutObservacion = () => {\r\n    // Convertir ángulo observado (horizontal) a grados decimales\r\n    const anguloHorizontalDecimal = convertirGMSToDecimal(\r\n      gradosH,\r\n      minutosH,\r\n      segundosH\r\n    );\r\n\r\n    // Calcular el nuevo azimut basado en el ángulo observado y el azimut inicial\r\n    const nuevoAzimutCalculado = calcularNuevoAzimut(\r\n      parseFloat(azimutInicial),\r\n      anguloHorizontalDecimal\r\n    );\r\n\r\n    // Guardar el nuevo azimut en el estado\r\n    setNuevoAzimut(nuevoAzimutCalculado);\r\n\r\n    return nuevoAzimutCalculado;\r\n  };\r\n\r\n  // Función para convertir grados a radianes\r\n  const convertirGradosARadianes = (grados) => {\r\n    return (grados * Math.PI) / 180;\r\n  };\r\n\r\n  // Función para calcular las proyecciones Norte y Este\r\n  const calcularProyecciones = (azimut, distancia) => {\r\n    const azimutRad = convertirGradosARadianes(azimut); // Convertir el azimut a radianes\r\n\r\n    // Proyección Norte (coseno del azimut por la distancia)\r\n    const proyeccionNorte = Math.cos(azimutRad) * distancia;\r\n\r\n    // Proyección Este (seno del azimut por la distancia)\r\n    const proyeccionEste = Math.sin(azimutRad) * distancia;\r\n\r\n    // Retornamos las proyecciones redondeadas a 4 decimales\r\n    return {\r\n      norte: proyeccionNorte.toFixed(4),\r\n      este: proyeccionEste.toFixed(4),\r\n    };\r\n  };\r\n\r\n  // Función para calcular las nuevas coordenadas\r\n  const calcularCoordenadas = (\r\n    norteAnterior,\r\n    esteAnterior,\r\n    proyeccionNorte,\r\n    proyeccionEste\r\n  ) => {\r\n    const nuevoNorte = parseFloat(norteAnterior) + parseFloat(proyeccionNorte);\r\n    const nuevoEste = parseFloat(esteAnterior) + parseFloat(proyeccionEste);\r\n\r\n    return {\r\n      nuevoNorte: nuevoNorte.toFixed(4), // Redondear a 4 decimales\r\n      nuevoEste: nuevoEste.toFixed(4), // Redondear a 4 decimales\r\n    };\r\n  };\r\n  const [contadorObservaciones, setContadorObservaciones] = useState(0); // Contador para saber cuántas observaciones se han hecho\r\n  // Estados para los totales\r\n  const [totalDistancia, setTotalDistancia] = useState(0);\r\n  const [totalProyeccionNorte, setTotalProyeccionNorte] = useState(0);\r\n  const [totalProyeccionEste, setTotalProyeccionEste] = useState(0);\r\n\r\n  // Estado para almacenar el último azimut calculado (usado para las siguientes observaciones)\r\n  const [ultimoAzimut, setUltimoAzimut] = useState(null);\r\n\r\n  const recalcularTotales = (nuevasObservaciones) => {\r\n    // Filtrar la primera observación si el brazo es externo\r\n    const observacionesFiltradas = brazoExterno\r\n      ? nuevasObservaciones.slice(1)\r\n      : nuevasObservaciones;\r\n\r\n    calcularCierreAngular(observacionesFiltradas, sentidoPoligonal);\r\n    calcularCierreAlturas(observacionesFiltradas, alturaInicial);\r\n\r\n    const nuevasDistancias = observacionesFiltradas.reduce(\r\n      (acc, obs) => acc + parseFloat(obs.distancia),\r\n      0\r\n    );\r\n\r\n    const nuevasProyeccionesNorte = observacionesFiltradas.reduce(\r\n      (acc, obs) => acc + parseFloat(obs.proyeccionNorte),\r\n      0\r\n    );\r\n    const nuevasProyeccionesEste = observacionesFiltradas.reduce(\r\n      (acc, obs) => acc + parseFloat(obs.proyeccionEste),\r\n      0\r\n    );\r\n\r\n    setTotalDistancia(nuevasDistancias);\r\n    setTotalProyeccionNorte(nuevasProyeccionesNorte);\r\n    setTotalProyeccionEste(nuevasProyeccionesEste);\r\n\r\n    const nuevaPrecision = calcularPrecision(\r\n      nuevasDistancias,\r\n      nuevasProyeccionesNorte,\r\n      nuevasProyeccionesEste\r\n    );\r\n    setPrecisionPoligonal(nuevaPrecision);\r\n  };\r\n\r\n  const agregarNuevaObservacion = () => {\r\n    // Validaciones\r\n    if (\r\n      gradosH === undefined ||\r\n      minutosH === undefined ||\r\n      segundosH === undefined ||\r\n      gradosV === undefined ||\r\n      minutosV === undefined ||\r\n      segundosV === undefined ||\r\n      distanciaObservada === \"\" ||\r\n      isNaN(distanciaObservada)\r\n    ) {\r\n      alert(\"Por favor, completa todos los campos con valores válidos.\");\r\n      return;\r\n    }\r\n\r\n    // Conversión de ángulo horizontal a decimal\r\n    const anguloObservadoDecimal = convertirGMSToDecimal(\r\n      Number(gradosH),\r\n      Number(minutosH),\r\n      Number(segundosH)\r\n    );\r\n    let nuevoAzimutCalculado;\r\n\r\n    if (contadorObservaciones === 0) {\r\n      nuevoAzimutCalculado = calcularAzimutObservacion();\r\n    } else {\r\n      const contraAzimut = calcularContraAzimut(ultimoAzimut);\r\n      nuevoAzimutCalculado = calcularAzimutSegundaObservacion(\r\n        contraAzimut,\r\n        anguloObservadoDecimal\r\n      );\r\n    }\r\n\r\n    const azimutSexagesimal = convertirDecimalAGMS(nuevoAzimutCalculado);\r\n\r\n    // Proyecciones Norte y Este\r\n    const { norte, este } = calcularProyecciones(\r\n      parseFloat(nuevoAzimutCalculado),\r\n      parseFloat(distanciaObservada)\r\n    );\r\n\r\n    // Cálculo de nuevas coordenadas\r\n    let nuevoNorte, nuevoEste;\r\n    if (contadorObservaciones === 0) {\r\n      ({ nuevoNorte, nuevoEste } = calcularCoordenadas(\r\n        norteInicial,\r\n        esteInicial,\r\n        norte,\r\n        este\r\n      ));\r\n    } else {\r\n      const { nuevoNorte: norteAnterior, nuevoEste: esteAnterior } =\r\n        observaciones[observaciones.length - 1];\r\n      ({ nuevoNorte, nuevoEste } = calcularCoordenadas(\r\n        norteAnterior,\r\n        esteAnterior,\r\n        norte,\r\n        este\r\n      ));\r\n    }\r\n\r\n    // Cálculo de la distancia vertical\r\n    const distanciaVertical = calcularDistanciaVerticalZenital(\r\n      gradosV,\r\n      minutosV,\r\n      segundosV,\r\n      distanciaObservada\r\n    );\r\n\r\n    // Cálculo de la altura\r\n    const alturaCalculada = calcularAlturaObservacion(\r\n      contadorObservaciones === 0\r\n        ? alturaInicial\r\n        : observaciones[observaciones.length - 1].alturaCalculada,\r\n      distanciaVertical,\r\n      alturaInstrumental,\r\n      alturaPrisma\r\n    );\r\n\r\n    // Crear el objeto de la nueva observación\r\n    const nuevaObservacion = {\r\n      id: idObservacion,\r\n      gradosH,\r\n      minutosH,\r\n      segundosH,\r\n      gradosV,\r\n      minutosV,\r\n      segundosV,\r\n      azimut: azimutSexagesimal,\r\n      anguloHorizontal: `${gradosH}° ${minutosH}' ${segundosH}\"`,\r\n      anguloVertical: `${gradosV}° ${minutosV}' ${segundosV}\"`,\r\n      distancia: distanciaObservada,\r\n      distanciaVertical, // Añadir la distancia vertical calculada aquí\r\n      alturaInstrumental,\r\n      alturaPrisma,\r\n      proyeccionNorte: norte,\r\n      proyeccionEste: este,\r\n      nuevoNorte,\r\n      nuevoEste,\r\n      alturaCalculada, // Guardar la altura calculada\r\n      alturaCalculada1: (\r\n        parseFloat(alturaInstrumental) +\r\n        parseFloat(distanciaVertical) -\r\n        parseFloat(alturaPrisma)\r\n      ).toFixed(4),\r\n    };\r\n\r\n    // Actualizar observaciones y recalcular totales\r\n    setObservaciones((prevObservaciones) => {\r\n      const nuevasObservaciones = [...prevObservaciones, nuevaObservacion];\r\n\r\n      // Llamamos a recalcularTotales después de agregar la nueva observación\r\n      recalcularTotales(nuevasObservaciones);\r\n      // Aquí calculamos el cierre de alturas con la observación recién agregada\r\n      calcularCierreAlturas(nuevasObservaciones);\r\n\r\n      return nuevasObservaciones;\r\n    });\r\n\r\n    // Actualización de totales directamente\r\n    setTotalDistancia(\r\n      (prevTotal) => prevTotal + parseFloat(distanciaObservada)\r\n    );\r\n    setTotalProyeccionNorte((prevTotal) => prevTotal + parseFloat(norte));\r\n    setTotalProyeccionEste((prevTotal) => prevTotal + parseFloat(este));\r\n\r\n    // Actualización de precisión\r\n    const nuevaPrecision = calcularPrecision(\r\n      totalDistancia + parseFloat(distanciaObservada),\r\n      totalProyeccionNorte + parseFloat(norte),\r\n      totalProyeccionEste + parseFloat(este)\r\n    );\r\n    setPrecisionPoligonal(nuevaPrecision);\r\n\r\n    setUltimoAzimut(parseFloat(nuevoAzimutCalculado));\r\n    setContadorObservaciones(contadorObservaciones + 1);\r\n\r\n    // Limpiar los campos de los inputs\r\n    setIdObservacion(\"\");\r\n    setGradosH(\"\");\r\n    setMinutosH(\"\");\r\n    setSegundosH(\"\");\r\n    setGradosV(\"\");\r\n    setMinutosV(\"\");\r\n    setSegundosV(\"\");\r\n    setDistanciaObservada(\"\");\r\n    setAlturaInstrumental(\"\");\r\n    setAlturaPrisma(\"\");\r\n  };\r\n\r\n  // Función para calcular la precisión de la poligonal\r\n  const calcularPrecision = (\r\n    distanciaTotal,\r\n    proyeccionNorteTotal,\r\n    proyeccionEsteTotal\r\n  ) => {\r\n    const sumatoriaProyecciones = Math.sqrt(\r\n      Math.pow(proyeccionNorteTotal, 2) + Math.pow(proyeccionEsteTotal, 2)\r\n    );\r\n    const precision = distanciaTotal / sumatoriaProyecciones;\r\n    return precision.toFixed(4); // Redondeamos a 4 decimales\r\n  };\r\n\r\n  const calcularContraAzimut = (azimut) => {\r\n    let contraAzimut;\r\n\r\n    if (azimut < 180) {\r\n      contraAzimut = azimut + 180;\r\n    } else {\r\n      contraAzimut = azimut - 180;\r\n    }\r\n\r\n    // Aseguramos que el contra-azimut esté en el rango de 0 a 360 grados\r\n    if (contraAzimut >= 360) {\r\n      contraAzimut -= 360;\r\n    }\r\n\r\n    return contraAzimut.toFixed(4); // Retornamos el contra-azimut redondeado a 4 decimales\r\n  };\r\n\r\n  const calcularAzimutSegundaObservacion = (\r\n    contraAzimut,\r\n    anguloObservadoDecimal\r\n  ) => {\r\n    let nuevoAzimut =\r\n      parseFloat(contraAzimut) + parseFloat(anguloObservadoDecimal);\r\n\r\n    // Si el nuevo azimut es mayor o igual a 360, restamos 360\r\n    if (nuevoAzimut >= 360) {\r\n      nuevoAzimut -= 360;\r\n    }\r\n\r\n    return nuevoAzimut.toFixed(4); // Retornamos el nuevo azimut redondeado a 4 decimales\r\n  };\r\n\r\n  const borrarUltimaObservacion = () => {\r\n    if (observaciones.length > 0) {\r\n      const ultimaObservacion = observaciones[observaciones.length - 1];\r\n\r\n      // Restar la distancia y proyecciones de la última observación\r\n      setTotalDistancia((prevTotal) =>\r\n        Math.max(0, prevTotal - parseFloat(ultimaObservacion.distancia))\r\n      );\r\n      setTotalProyeccionNorte((prevTotal) =>\r\n        Math.max(0, prevTotal - parseFloat(ultimaObservacion.proyeccionNorte))\r\n      );\r\n      setTotalProyeccionEste((prevTotal) =>\r\n        Math.max(0, prevTotal - parseFloat(ultimaObservacion.proyeccionEste))\r\n      );\r\n\r\n      // Crear una nueva lista sin la última observación\r\n      const nuevasObservaciones = observaciones.slice(0, -1);\r\n      setObservaciones(nuevasObservaciones);\r\n\r\n      // Recalcular la precisión de la poligonal\r\n      const nuevaPrecision = calcularPrecision(\r\n        Math.max(0, totalDistancia - parseFloat(ultimaObservacion.distancia)),\r\n        Math.max(\r\n          0,\r\n          totalProyeccionNorte - parseFloat(ultimaObservacion.proyeccionNorte)\r\n        ),\r\n        Math.max(\r\n          0,\r\n          totalProyeccionEste - parseFloat(ultimaObservacion.proyeccionEste)\r\n        )\r\n      );\r\n      setPrecisionPoligonal(nuevaPrecision);\r\n\r\n      // Actualizar el contador de observaciones\r\n      setContadorObservaciones(contadorObservaciones - 1);\r\n\r\n      // Si todavía hay observaciones, actualiza el último azimut\r\n      if (nuevasObservaciones.length > 0) {\r\n        const ultimoAzimutAnterior =\r\n          nuevasObservaciones[nuevasObservaciones.length - 1].azimut;\r\n        const ultimoAzimutDecimal = convertirGMSToDecimal(\r\n          ...ultimoAzimutAnterior.split(/[°'\"]/).map((num) => parseFloat(num))\r\n        );\r\n        setUltimoAzimut(ultimoAzimutDecimal);\r\n      } else {\r\n        setUltimoAzimut(null);\r\n      }\r\n\r\n      // --- Recalcular el cierre angular ---\r\n      // Actualizamos el resumen angular de la poligonal después de eliminar la observación\r\n      calcularCierreAngular(nuevasObservaciones, sentidoPoligonal);\r\n    }\r\n  };\r\n\r\n  const compensarAngular = () => {\r\n    const N = observaciones.length;\r\n\r\n    // Evitar divisiones por cero si no hay observaciones\r\n    if (N === 0) return [];\r\n\r\n    // Si es brazo externo, omitimos el primer ángulo para la compensación\r\n    const observacionesACompensar = brazoExterno\r\n      ? observaciones.slice(1)\r\n      : observaciones;\r\n    const cantidadObservaciones = observacionesACompensar.length;\r\n\r\n    // Ajuste angular basado en la cantidad de ángulos a compensar (si brazo externo, N-1)\r\n    const ajusteAngular =\r\n      convertirAGradosDecimales(\r\n        errorAngular.grados,\r\n        errorAngular.minutos,\r\n        errorAngular.segundos\r\n      ) / cantidadObservaciones; // Ajuste en grados decimales basado en la cantidad de observaciones a compensar\r\n\r\n    // Crear un nuevo array de observaciones compensadas\r\n    const nuevasObservaciones = observaciones.map((obs, index) => {\r\n      // Si es la primera observación y el brazo es externo, devolverla sin cambios (mantener el ángulo tal cual)\r\n      if (index === 0 && brazoExterno) {\r\n        return {\r\n          ...obs,\r\n          anguloHorizontalCompensado: obs.anguloHorizontal, // Mantener el ángulo original\r\n        };\r\n      }\r\n\r\n      // Convertir el ángulo horizontal actual a decimal\r\n      const [grados, minutos, segundos] = obs.anguloHorizontal\r\n        .split(/[°'\"]/)\r\n        .map(parseFloat);\r\n\r\n      const anguloDec = convertirAGradosDecimales(grados, minutos, segundos);\r\n\r\n      // Aplicar el ajuste en grados decimales\r\n      const anguloCompensadoDec = anguloDec - ajusteAngular;\r\n\r\n      // Convertir de nuevo a GMS\r\n      const anguloCompensadoGMS = convertirDecimalAGMS(anguloCompensadoDec);\r\n\r\n      // Retornar la observación con el ángulo compensado\r\n      return {\r\n        ...obs,\r\n        anguloHorizontalCompensado: anguloCompensadoGMS, // Guardamos el ángulo compensado en GMS\r\n      };\r\n    });\r\n\r\n    return nuevasObservaciones; // Devolver las observaciones ajustadas\r\n  };\r\n  const ajustarAlturasVerticales = (\r\n    observacionesCompensadas,\r\n    alturaInicial\r\n  ) => {\r\n    let alturaAcumulada;\r\n\r\n    if (brazoExterno) {\r\n      alturaAcumulada = parseFloat(observacionesCompensadas[0].alturaCalculada);\r\n      console.log(\r\n        `\\n*** Brazo Externo: Usando altura de la primera observación como base: ${alturaAcumulada} ***`\r\n      );\r\n    } else {\r\n      // Si es brazo interno, partimos de la altura inicial proporcionada\r\n      alturaAcumulada = parseFloat(alturaInicial);\r\n      console.log(\r\n        `\\n*** Brazo Interno: Usando altura inicial proporcionada: ${alturaAcumulada} ***`\r\n      );\r\n    }\r\n    // Validar que la altura base sea válida\r\n    if (isNaN(alturaAcumulada)) {\r\n      console.error(\"Error: Altura inicial no válida.\");\r\n      alturaAcumulada = 0; // Manejo de error básico\r\n    }\r\n\r\n    // Ajustar las alturas progresivamente\r\n    const nuevasObservaciones = observacionesCompensadas.map((obs, index) => {\r\n      console.log(\r\n        `\\nCalculando altura compensada para la observación ${obs.id}`\r\n      );\r\n\r\n      if (index === 0 && brazoExterno) {\r\n        // La primera observación no se ajusta si el brazo es externo\r\n        obs.alturaCompensada = obs.alturaCalculada;\r\n        console.log(\r\n          `Brazo Externo - Primera observación sin ajuste: ${obs.alturaCompensada}`\r\n        );\r\n      } else {\r\n        // Validar la distancia vertical compensada\r\n        const distanciaVerticalCompensada = parseFloat(\r\n          obs.distanciaVerticalCompensada\r\n        );\r\n        if (isNaN(distanciaVerticalCompensada)) {\r\n          console.error(\r\n            `Error: La distancia vertical compensada no es válida para la observación ${obs.id}`\r\n          );\r\n          obs.alturaCompensada = \"NaN\"; // Manejo de error\r\n        } else {\r\n          // Calcular la nueva altura acumulada\r\n          alturaAcumulada += distanciaVerticalCompensada;\r\n\r\n          obs.alturaCompensada = alturaAcumulada.toFixed(4);\r\n          console.log(\r\n            `Altura acumulada y compensada para la observación ${obs.id}: ${obs.alturaCompensada}`\r\n          );\r\n        }\r\n      }\r\n\r\n      return obs;\r\n    });\r\n\r\n    return nuevasObservaciones;\r\n  };\r\n\r\n  const compensarProyeccionesYAlturas = (\r\n    nuevasObservaciones,\r\n    alturaInicial\r\n  ) => {\r\n    const errorNorte = totalProyeccionNorte; // Error en la proyección Norte\r\n    const errorEste = totalProyeccionEste; // Error en la proyección Este\r\n    const errorAlturas = cierreAlturas; // Error de cierre en alturas\r\n\r\n    // Filtrar la primera observación si el brazo es externo\r\n    const observacionesACompensar = brazoExterno\r\n      ? nuevasObservaciones.slice(1)\r\n      : nuevasObservaciones;\r\n\r\n    // Calcular el total de distancia solo de las observaciones que se van a compensar\r\n    const totalDistancia = observacionesACompensar.reduce(\r\n      (total, obs) => total + parseFloat(obs.distancia),\r\n      0\r\n    );\r\n\r\n    // Compensar las distancias verticales antes de ajustar las alturas\r\n    const observacionesConDistanciaCompensada = nuevasObservaciones.map(\r\n      (obs, index) => {\r\n        if (index === 0 && brazoExterno) {\r\n          return obs; // No compensar la primera observación si es brazo externo\r\n        }\r\n\r\n        // Calcular el ajuste de altura basado en la distancia\r\n        const ajusteAltura =\r\n          (Math.abs(errorAlturas) * obs.distancia) / totalDistancia;\r\n\r\n        // Validar la distancia vertical original\r\n        const distanciaVertical = parseFloat(obs.alturaCalculada1);\r\n        console.log(\r\n          `Distancia Vertical Original para observación ${obs.id}: ${distanciaVertical}`\r\n        );\r\n\r\n        if (isNaN(distanciaVertical)) {\r\n          console.error(\"Error: distanciaVertical no es un número válido\", obs);\r\n          obs.distanciaVerticalCompensada = \"NaN\";\r\n        } else {\r\n          // Ajustar según el signo del errorAlturas\r\n          const distanciaVerticalCompensada =\r\n            errorAlturas < 0\r\n              ? distanciaVertical + ajusteAltura // Sumar si errorAlturas es negativo\r\n              : distanciaVertical - ajusteAltura; // Restar si errorAlturas es positivo\r\n\r\n          console.log(\r\n            `Distancia Vertical Compensada para observación ${obs.id}: ${distanciaVerticalCompensada}`\r\n          );\r\n          obs.distanciaVerticalCompensada =\r\n            distanciaVerticalCompensada.toFixed(4); // Guardar la distancia vertical compensada\r\n        }\r\n\r\n        return obs;\r\n      }\r\n    );\r\n\r\n    // *** Ajustar las alturas verticales con la distancia compensada ***\r\n    const observacionesConAlturasAjustadas = ajustarAlturasVerticales(\r\n      observacionesConDistanciaCompensada,\r\n      alturaInicial\r\n    );\r\n\r\n    // Compensar proyecciones Norte y Este, además de ajustar las alturas calculadas\r\n    const observacionesFinales = observacionesConAlturasAjustadas.map(\r\n      (obs, index) => {\r\n        if (index === 0 && brazoExterno) {\r\n          // Si es la primera observación y el brazo es externo, no se ajusta pero se mantiene en la tabla\r\n          return {\r\n            ...obs,\r\n            proyeccionNorteCompensada: obs.proyeccionNorte,\r\n            proyeccionEsteCompensada: obs.proyeccionEste,\r\n            alturaCompensada: obs.alturaCompensada, // Mantener la altura calculada\r\n          };\r\n        }\r\n\r\n        // Aplicar ajustes a las proyecciones para el resto de las observaciones\r\n        const ajusteNorte = (errorNorte * obs.distancia) / totalDistancia;\r\n        const ajusteEste = (errorEste * obs.distancia) / totalDistancia;\r\n\r\n        const proyeccionNorteCompensada =\r\n          parseFloat(obs.proyeccionNorte) - ajusteNorte;\r\n        const proyeccionEsteCompensada =\r\n          parseFloat(obs.proyeccionEste) - ajusteEste;\r\n\r\n        return {\r\n          ...obs,\r\n          proyeccionNorteCompensada: proyeccionNorteCompensada.toFixed(4),\r\n          proyeccionEsteCompensada: proyeccionEsteCompensada.toFixed(4),\r\n          alturaCompensada: obs.alturaCompensada, // Mantener la altura compensada calculada\r\n        };\r\n      }\r\n    );\r\n\r\n    return observacionesFinales; // Retornar las observaciones compensadas con proyecciones y alturas ajustadas\r\n  };\r\n\r\n  const compensarPoligonal = () => {\r\n    const nuevasObservaciones = compensarAngular(); // Primero ajusta los ángulos\r\n\r\n    // Llama a la función de compensar proyecciones y alturas, incluyendo la altura inicial\r\n    const observacionesFinales = compensarProyeccionesYAlturas(\r\n      nuevasObservaciones,\r\n      alturaInicial // Asegúrate de que alturaInicial esté definida en tu estado o variable\r\n    );\r\n\r\n    setObservacionesCompensadas(observacionesFinales); // Actualizar el estado con las observaciones compensadas\r\n  };\r\n\r\n  // Función para recalcular las coordenadas con las proyecciones ajustadas\r\n  const recalcularCoordenadasAjustadas = (\r\n    norteAnterior,\r\n    esteAnterior,\r\n    proyeccionNorteAjustada,\r\n    proyeccionEsteAjustada\r\n  ) => {\r\n    const nuevoNorteAjustado =\r\n      parseFloat(norteAnterior) + parseFloat(proyeccionNorteAjustada);\r\n    const nuevoEsteAjustado =\r\n      parseFloat(esteAnterior) + parseFloat(proyeccionEsteAjustada);\r\n\r\n    return {\r\n      nuevoNorteAjustado: nuevoNorteAjustado.toFixed(4),\r\n      nuevoEsteAjustado: nuevoEsteAjustado.toFixed(4),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => e.preventDefault()}\r\n      className=\"formulario-observacion\"\r\n    >\r\n      {!coordenadasCalculadas ? (\r\n        <>\r\n          {\" \"}\r\n          <div>\r\n            <label>Sentido de la Poligonal: </label>\r\n            <select\r\n              value={sentidoPoligonal}\r\n              onChange={(e) => setSentidoPoligonal(e.target.value)}\r\n            >\r\n              <option value=\"internos\">Ángulos Internos</option>\r\n              <option value=\"externos\">Ángulos Externos</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Tipo de Brazo de la Poligonal: </label>\r\n            <select\r\n              value={brazoExterno ? \"externo\" : \"interno\"} // Determinar si el brazo es externo o interno\r\n              onChange={(e) => setBrazoExterno(e.target.value === \"externo\")}\r\n            >\r\n              <option value=\"interno\">Brazo Interno</option>{\" \"}\r\n              {/* Opción para poligonal interna */}\r\n              <option value=\"externo\">Brazo Externo</option>{\" \"}\r\n              {/* Opción para poligonal con brazo externo */}\r\n            </select>\r\n          </div>\r\n          <h3>Descripción y Coordenadas del Punto Inicial</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Descripción del Punto Inicial\"\r\n            value={descripcionInicial}\r\n            onChange={(e) => setDescripcionInicial(e.target.value)}\r\n            className=\"coordenadas-input\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Norte (Y)\"\r\n            value={norteInicial}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (/^[0-9]*[.,]?[0-9]*$/.test(value)) {\r\n                // Solo números y punto decimal\r\n                setNorteInicial(value);\r\n              }\r\n            }}\r\n            required\r\n            className=\"coordenadas-input\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Este (X)\"\r\n            value={esteInicial}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (/^[0-9]*[.,]?[0-9]*$/.test(value)) {\r\n                // Solo números y punto decimal\r\n                setEsteInicial(value);\r\n              }\r\n            }}\r\n            required\r\n            className=\"coordenadas-input\"\r\n          />\r\n          {/* Nuevo input para la altura inicial */}\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Altura (m)\"\r\n            value={alturaInicial}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (/^[0-9]*[.,]?[0-9]*$/.test(value)) {\r\n                // Solo números y punto decimal\r\n                setAlturaInicial(value);\r\n              }\r\n            }}\r\n            required\r\n            className=\"coordenadas-input\"\r\n          />\r\n          <h3>Descripción y Coordenadas del Punto Visado</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Descripción del Punto Visado\"\r\n            value={descripcionVisado}\r\n            onChange={(e) => setDescripcionVisado(e.target.value)}\r\n            className=\"coordenadas-input\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Norte (Y)\"\r\n            value={norteVisado}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (/^[0-9]*[.,]?[0-9]*$/.test(value)) {\r\n                // Solo números y punto decimal\r\n                setNorteVisado(value);\r\n              }\r\n            }}\r\n            required\r\n            className=\"coordenadas-input\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Este (X)\"\r\n            value={esteVisado}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (/^[0-9]*[.,]?[0-9]*$/.test(value)) {\r\n                // Solo números y punto decimal\r\n                setEsteVisado(value);\r\n              }\r\n            }}\r\n            required\r\n            className=\"coordenadas-input\"\r\n          />\r\n          <button type=\"button\" onClick={calcularAzimutYAlmacenarValores}>\r\n            Calcular Azimut y Distancia\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/* Tabla de Coordenadas Iniciales */}\r\n          <div className=\"tabla-coordenadas\">\r\n            <h3>Coordenadas Iniciales</h3>\r\n            <table border=\"1\" style={{ marginTop: \"10px\", width: \"100%\" }}>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Norte (Y)</th>\r\n                  <th>Este (X)</th>\r\n                  <th>Altura (m)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {coordenadas.map((coord, index) => (\r\n                  <tr key={index}>\r\n                    <td>{coord.id}</td>\r\n                    <td>{coord.norte}</td>\r\n                    <td>{coord.este}</td>\r\n                    <td>{coord.altura || \"N/A\"}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <h3 style={{ margin: \"5px 0\" }}>\r\n            Azimut Inicial: {convertirDecimalAGMS(azimutInicial)}\r\n          </h3>\r\n          <h3 style={{ margin: \"5px 0\" }}>Distancia: {distanciaInicial}m</h3>\r\n          <h3 className=\"header\" style={{ color: \"black\" }}>\r\n            Ingresar Observación\r\n          </h3>\r\n          <div className=\"row-container\">\r\n            <div className=\"input-group\">\r\n              <h4 className=\"header\">ID Obs</h4>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"ID\"\r\n                value={idObservacion}\r\n                onChange={(e) => setIdObservacion(e.target.value)}\r\n                className=\"input-field\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <h4 className=\"header\">Ángulo Horizontal</h4>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Grados\"\r\n                value={gradosH}\r\n                onChange={(e) => setGradosH(Number(e.target.value))}\r\n                className=\"input-field\"\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Minutos\"\r\n                value={minutosH}\r\n                onChange={(e) => setMinutosH(Number(e.target.value))}\r\n                className=\"input-field\"\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Segundos\"\r\n                value={segundosH}\r\n                onChange={(e) => setSegundosH(Number(e.target.value))}\r\n                className=\"input-field\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <h4 className=\"header\">Ángulo Vertical</h4>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Grados\"\r\n                value={gradosV}\r\n                onChange={(e) => setGradosV(Number(e.target.value))}\r\n                className=\"input-field\"\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Minutos\"\r\n                value={minutosV}\r\n                onChange={(e) => setMinutosV(Number(e.target.value))}\r\n                className=\"input-field\"\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Segundos\"\r\n                value={segundosV}\r\n                onChange={(e) => setSegundosV(Number(e.target.value))}\r\n                className=\"input-field\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <h4 className=\"header\">Distancia (Metros)</h4>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Distancia (m)\"\r\n                value={distanciaObservada}\r\n                onChange={(e) => setDistanciaObservada(e.target.value)}\r\n                className=\"input-field\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <h4 className=\"header\">Altura Instrumental</h4>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Altura Instrumental (m)\"\r\n                value={alturaInstrumental}\r\n                onChange={(e) => setAlturaInstrumental(e.target.value)}\r\n                className=\"input-field\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <h4 className=\"header\">Altura Prisma</h4>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Altura Prisma (m)\"\r\n                value={alturaPrisma}\r\n                onChange={(e) => setAlturaPrisma(e.target.value)}\r\n                className=\"input-field\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <button type=\"button\" onClick={agregarNuevaObservacion}>\r\n            Agregar Observación\r\n          </button>\r\n          {/* Tabla de observaciones */}\r\n          {observaciones.length > 0 && (\r\n            <>\r\n              {/* Primera tabla */}\r\n              <table border=\"1\" cellPadding=\"10\" cellSpacing=\"1\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"id\">ID</th>\r\n                    <th className=\"angulo\">Ángulo H</th>\r\n                    <th className=\"angulo\">Ángulo V</th>\r\n                    <th className=\"distancia\">Distancia</th>\r\n                    <th className=\"angulo\">Azimut</th>\r\n                    <th className=\"altura\">Alt Ins</th>\r\n                    <th className=\"altura\">Alt Pri</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {observaciones.map((obs, index) => (\r\n                    <tr key={index}>\r\n                      <td>{obs.id}</td>\r\n                      <td>{obs.anguloHorizontal}</td>\r\n                      <td>{obs.anguloVertical}</td>\r\n                      <td>{obs.distancia}m</td>\r\n                      <td>{obs.azimut}</td>\r\n                      <td>{obs.alturaInstrumental}m</td>\r\n                      <td>{obs.alturaPrisma}m</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <br /> {/* Espacio entre las dos tablas */}\r\n              {/* Segunda tabla */}\r\n              <table border=\"1\" cellPadding=\"10\" cellSpacing=\"1\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"id\">ID</th> {/* Agregar la columna ID */}\r\n                    <th className=\"proyeccion\">Proy Norte</th>\r\n                    <th className=\"proyeccion\">Proy Este</th>\r\n                    <th className=\"coordenada\">Norte</th>\r\n                    <th className=\"coordenada\">Este</th>\r\n                    <th className=\"altura\">Altura</th> {/* Nueva columna */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {observaciones.map((obs, index) => {\r\n                    // Calcular la distancia vertical zenital\r\n                    const distanciaVertical = calcularDistanciaVerticalZenital(\r\n                      obs.gradosV,\r\n                      obs.minutosV,\r\n                      obs.segundosV,\r\n                      obs.distancia\r\n                    );\r\n\r\n                    // Calcular la altura ajustada sobre el piso\r\n                    const alturaCalculada = calcularAlturaObservacion(\r\n                      index === 0\r\n                        ? alturaInicial\r\n                        : observaciones[index - 1].alturaCalculada,\r\n                      distanciaVertical,\r\n                      obs.alturaInstrumental,\r\n                      obs.alturaPrisma\r\n                    );\r\n\r\n                    // Guardar la altura calculada en el objeto de observación\r\n                    observaciones[index].alturaCalculada = alturaCalculada;\r\n\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{obs.id}</td> {/* Mostrar el ID */}\r\n                        <td>{obs.proyeccionNorte}m</td>\r\n                        <td>{obs.proyeccionEste}m</td>\r\n                        <td>{obs.nuevoNorte}</td>\r\n                        <td>{obs.nuevoEste}</td>\r\n                        <td>{alturaCalculada}</td>{\" \"}\r\n                        {/* Mostrar la altura calculada */}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n              {/* Botón para borrar la última observación */}\r\n              <button type=\"button\" onClick={borrarUltimaObservacion}>\r\n                Borrar Última Observación\r\n              </button>\r\n              <>\r\n                {/* Resumen Angular de la Poligonal */}\r\n                <div className=\"resumen-angular\">\r\n                  <h3>Resumen Angular de la Poligonal</h3>\r\n                  <p>\r\n                    <strong>Suma Teórica:</strong>{\" \"}\r\n                    {`${sumaTeorica.grados}° ${sumaTeorica.minutos}' ${sumaTeorica.segundos}\"`}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Suma Real:</strong>{\" \"}\r\n                    {`${sumaReal.grados}° ${sumaReal.minutos}' ${sumaReal.segundos}\"`}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Error Angular:</strong>{\" \"}\r\n                    {`${errorAngular.grados}° ${errorAngular.minutos}' ${errorAngular.segundos}\"`}\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Totales */}\r\n                <div className=\"totales\">\r\n                  <h3>Totales</h3>\r\n                  <p>\r\n                    <strong>Total Distancia:</strong>{\" \"}\r\n                    {totalDistancia.toFixed(4)} m\r\n                  </p>\r\n                  <p>\r\n                    <strong>Total Proyección Norte:</strong>{\" \"}\r\n                    {totalProyeccionNorte.toFixed(4)} m\r\n                  </p>\r\n                  <p>\r\n                    <strong>Total Proyección Este:</strong>{\" \"}\r\n                    {totalProyeccionEste.toFixed(4)} m\r\n                  </p>\r\n                  <p>\r\n                    <strong>Cierre Alturas:</strong> {cierreAlturas} m\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Precisión de la Poligonal */}\r\n                <div className=\"precision-poligonal\">\r\n                  <h3>Precisión de la Poligonal</h3>\r\n                  <p>\r\n                    <strong>Precisión:</strong> {precisionPoligonal}\r\n                  </p>\r\n                </div>\r\n              </>\r\n            </>\r\n          )}\r\n          {/* Botón para compensar la poligonal */}\r\n          <button type=\"button\" onClick={compensarPoligonal}>\r\n            Compensar Poligonal\r\n          </button>\r\n          {observacionesCompensadas.length > 0 && (\r\n            <>\r\n              <h3>Observaciones Compensadas</h3>\r\n              {/* Primera tabla */}\r\n              <table border=\"1\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Ángulo H Compensado</th>\r\n                    <th>Proyección N Compensada</th>\r\n                    <th>Proyección E Compensada</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {observacionesCompensadas.map((obs, index) => (\r\n                    <tr key={index}>\r\n                      <td>{obs.id}</td>\r\n                      <td>{obs.anguloHorizontalCompensado}</td>\r\n                      <td>{obs.proyeccionNorteCompensada}m</td>\r\n                      <td>{obs.proyeccionEsteCompensada}m</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <br />\r\n              {/* Segunda tabla */}\r\n              <table border=\"1\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Norte Ajustado</th>\r\n                    <th>Este Ajustado</th>\r\n                    <th>Altura Compensada</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {observacionesCompensadas.map((obs, index) => {\r\n                    const { nuevoNorteAjustado, nuevoEsteAjustado } =\r\n                      recalcularCoordenadasAjustadas(\r\n                        index === 0\r\n                          ? norteInicial\r\n                          : observacionesCompensadas[index - 1]\r\n                              .nuevoNorteAjustado,\r\n                        index === 0\r\n                          ? esteInicial\r\n                          : observacionesCompensadas[index - 1]\r\n                              .nuevoEsteAjustado,\r\n                        obs.proyeccionNorteCompensada,\r\n                        obs.proyeccionEsteCompensada\r\n                      );\r\n\r\n                    observacionesCompensadas[index].nuevoNorteAjustado =\r\n                      nuevoNorteAjustado;\r\n                    observacionesCompensadas[index].nuevoEsteAjustado =\r\n                      nuevoEsteAjustado;\r\n\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{obs.id}</td>\r\n                        <td>{nuevoNorteAjustado}</td>\r\n                        <td>{nuevoEsteAjustado}</td>\r\n                        <td>\r\n                          {isNaN(parseFloat(obs.alturaCompensada))\r\n                            ? \"-\"\r\n                            : parseFloat(obs.alturaCompensada).toFixed(3)}\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n\r\n              {/* Gráfico */}\r\n              <div className=\"app-container\">\r\n                <GraficoPoligonal\r\n                  observacionesCompensadas={observacionesCompensadas}\r\n                />\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"10px\",\r\n                    right: \"10px\",\r\n                    fontSize: \"12px\",\r\n                    color: \"gray\",\r\n                  }}\r\n                >\r\n                  By Sebastian Martinez\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormularioObservacion;\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Login = ({ setIsAuthenticated }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (username === \"admin\" && password === \"1234\") {\r\n      setIsAuthenticated(true);\r\n      navigate(\"/formulario\"); // Redirigir después del login\r\n    } else {\r\n      setError(\"Usuario o contraseña incorrectos\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        style={{\r\n          width: \"300px\",\r\n          padding: \"20px\",\r\n          border: \"1px solid #ccc\",\r\n          borderRadius: \"10px\",\r\n          backgroundColor: \"#f9f9f9\",\r\n        }}\r\n      >\r\n        <h2>Iniciar Sesión</h2>\r\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>Usuario:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            style={{ width: \"100%\", padding: \"8px\", marginTop: \"5px\" }}\r\n            required\r\n          />\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>Contraseña:</label>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            style={{ width: \"100%\", padding: \"8px\", marginTop: \"5px\" }}\r\n            required\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          style={{\r\n            width: \"100%\",\r\n            padding: \"10px\",\r\n            backgroundColor: \"#007bff\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: \"5px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          Ingresar\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  useNavigate,\n} from \"react-router-dom\";\nimport FormularioObservacion from \"./components/FormularioObservacion\";\nimport Login from \"./components/Login\";\nimport \"./App.css\";\n\nfunction App() {\n  const [observaciones, setObservaciones] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado para manejar autenticación\n\n  const agregarObservacion = (observacion) => {\n    setObservaciones([...observaciones, observacion]);\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1 style={{ margin: \"5px 0\", padding: \"0\" }}>Cálculo de Poligonal</h1>\n        <Routes>\n          {/* Ruta principal de Login */}\n          <Route\n            path=\"/\"\n            element={<Login setIsAuthenticated={setIsAuthenticated} />}\n          />\n\n          {/* Ruta protegida para el formulario */}\n          <Route\n            path=\"/formulario\"\n            element={\n              isAuthenticated ? (\n                <FormularioObservacion\n                  agregarObservacion={agregarObservacion}\n                />\n              ) : (\n                <p>Debes iniciar sesión para ver esta página</p>\n              )\n            }\n          />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}